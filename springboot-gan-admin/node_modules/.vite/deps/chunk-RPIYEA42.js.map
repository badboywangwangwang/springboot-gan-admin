{
  "version": 3,
  "sources": ["../../lodash/isEqual.js", "../../element-plus/es/utils/scroll-into-view.js"],
  "sourcesContent": ["var baseIsEqual = require('./_baseIsEqual');\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nmodule.exports = isEqual;\n", "import isServer from './isServer';\n\nfunction scrollIntoView(container, selected) {\r\n    if (isServer)\r\n        return;\r\n    if (!selected) {\r\n        container.scrollTop = 0;\r\n        return;\r\n    }\r\n    const offsetParents = [];\r\n    let pointer = selected.offsetParent;\r\n    while (pointer !== null &&\r\n        container !== pointer &&\r\n        container.contains(pointer)) {\r\n        offsetParents.push(pointer);\r\n        pointer = pointer.offsetParent;\r\n    }\r\n    const top = selected.offsetTop +\r\n        offsetParents.reduce((prev, curr) => prev + curr.offsetTop, 0);\r\n    const bottom = top + selected.offsetHeight;\r\n    const viewRectTop = container.scrollTop;\r\n    const viewRectBottom = viewRectTop + container.clientHeight;\r\n    if (top < viewRectTop) {\r\n        container.scrollTop = top;\r\n    }\r\n    else if (bottom > viewRectBottom) {\r\n        container.scrollTop = bottom - container.clientHeight;\r\n    }\r\n}\n\nexport default scrollIntoView;\n"],
  "mappings": ";;;;;;;;;AAAA;AAAA;AAAA,QAAI,cAAc;AA8BlB,aAAS,QAAQ,OAAO,OAAO;AAC7B,aAAO,YAAY,OAAO,KAAK;AAAA,IACjC;AAEA,WAAO,UAAU;AAAA;AAAA;;;AChCjB,SAAS,eAAe,WAAW,UAAU;AACzC,MAAI;AACA;AACJ,MAAI,CAAC,UAAU;AACX,cAAU,YAAY;AACtB;AAAA,EACJ;AACA,QAAM,gBAAgB,CAAC;AACvB,MAAI,UAAU,SAAS;AACvB,SAAO,YAAY,QACf,cAAc,WACd,UAAU,SAAS,OAAO,GAAG;AAC7B,kBAAc,KAAK,OAAO;AAC1B,cAAU,QAAQ;AAAA,EACtB;AACA,QAAM,MAAM,SAAS,YACjB,cAAc,OAAO,CAAC,MAAM,SAAS,OAAO,KAAK,WAAW,CAAC;AACjE,QAAM,SAAS,MAAM,SAAS;AAC9B,QAAM,cAAc,UAAU;AAC9B,QAAM,iBAAiB,cAAc,UAAU;AAC/C,MAAI,MAAM,aAAa;AACnB,cAAU,YAAY;AAAA,EAC1B,WACS,SAAS,gBAAgB;AAC9B,cAAU,YAAY,SAAS,UAAU;AAAA,EAC7C;AACJ;AAEA,IAAO,2BAAQ;",
  "names": []
}
